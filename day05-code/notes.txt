数组：是一种容器，可以同时存放多个数据值。

数组的特点：
1.数组是一种引用数据类型
2.数组中的多个数据，类型必须统一
3.数组的长度在运行期间长度不可改变

数组的初始化：在内存中创建一个数组，并且其中赋予一些默认值

两种常见的初始化方式：
1.动态初始化（指定长度）
2.静态初始化（指定内容）

动态初始化数组的格式：
数据类型[] 数组名称=new 数据类型[数组长度];

解析含义：
左侧数据类型：也就是数组中保存的数据，全都是统一的什么类型
左侧的中括号：代表我是一个数组
左侧数组名称：给数组去一个名字
右侧的new：代表创建数组的动作
右侧数据类型：必须和左侧数据类型保持一致
右侧中括号的长度：也就是数组中可以保存多少个数据，是一个int数字

/~~/

动态初始化（指定长度）：在创建数组的时候，直接指定数组中元素的个数。
静态初始化（指定内容）：在创建数组的时候，不直接指定数组元素的个数，而是直接将数组的具体内容进行指定。

静态初始化的基本格式：
数据类型[] 数组名称=new 数据类型[]{元素1,元素2,元素3,...};

注意事项：
虽然静态初始化没有直接告诉长度，但是根据大括号里面元素的具体内容，也可以自动推算出来长度。

/~~/

使用静态初始化数组的时候，格式还可以省略一下

标准格式：
数据类型[] 数组名称=new 数据类型[]{元素1,元素2,元素3,...};

省略格式：
数据类型[] 数组名称={元素1,元素2,元素3,...};

注意事项：
1.静态初始化没有直接指定长度，但是仍然会自动推算得到数组的长度。
2.静态初始化的格式可以拆分为两个步骤。
    int[] arrayB;
    arrayB = new int[]{10, 12, 15};
3.动态初始化数组也可以拆成两个步骤
    int[] arrayC;
    arrayC=new int[10];
4.静态初始化一旦使用省略格式，就不能拆分成为两个步骤了

使用建议：
如果不确定数组中的具体内容，使用动态初始化；否则，已经确定了数组中的具体内容，使用静态初始化。

/~~/

直接打印数组的名称，得到的是数组对应的：内存地址的哈希值。

访问数组元素的格式：数组名称[索引值];
索引值：就是一个int数字，代表数组中元素的编号
【注意】：索引值从0开始，一直到数组的长度-1为止。

/~~/

使用动态初始化数组的时候，其中的元素会自动拥有一个默认值。规则如下：
如果是整数类型，那么默认值为0；
如果是浮点类型，那么默认值为0.0；
如果是字符类型，那么默认值为'\u0000'；
如果是布尔类型，那么默认为false；
如果是引用类型，那么默认为null

注意事项：
静态初始化其实也有默认值的过程，只不过系统自动马上将默认值替换成为了大括号中的具体数值。

/~~/

如果访问数组元素的时候，索引编号并不存在，那么将会发生数组索引越界异常。ArrayIndexOutOfBoundsException
原因：索引编号写错了
解决：修改成为存在的正确索引编号

所有的引用类型变量，都可以赋值为一个null值。但是代表其中什么都没有。

数组必须进行new初始化才能使用其中的元素。
如果只是赋值了一个null,没有进行new创建
那么将会发生
空指针异常 NullPointerException

原因：忘了new
解决：补上new

/~~/

如何获取数组的长度，格式：
数组名称.length

这将会得到一个int数字，代表数组的长度

数组一旦创建，程序运行期间，长度不可改变。

/~~/

遍历数组，说的就是对数组中的每一个元素进行逐一、挨个儿处理。默认的处理方式就是打印输出。

int[] array={5,15,25,35,45,55,65};

for (int i : array) {
    System.out.println(i);
}
System.out.println("===============");

for (int i = 0; i < array.length; i++) {
    System.out.println(array[i]);
}

/~~/

任何数据类型都可以作为方法的参数

数组可以作为方法的参数
当调用方法的时候，向方法的小括号中进行传参，传递进去的其实就是数组的地址值。

一个方法可以有0、1、多个参数，但是只能有0个或者1个返回值，不能有多个返回值。
如果希望一个方法中产生多个结果数据进行返回，怎么办？
解决方案：使用一个数组作为返回值类型即可。

总结：
任何数据类型都可以作为方法的参数类型，或者返回值类型。

数组作为方法的参数，传递进去的其实是数组的地址值。
数组作为方法的返回值，传递进去的其实也是数组的地址值。

/~~/

