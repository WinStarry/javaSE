java.util.Map<k,v>集合
Map集合的特点：
    1.Map集合是一个双列集合，一个元素包含两个值(一个是key,一个是value)
    2.Map集合中的元素，Key和value的数据类型可以相同，也可以不同
    3.Map集合中的元素，key是不允许重复的，value的值可以允许重复
    4.Map集合中的元素，key和value是一一对应的。

java.util.HashMap<k,v>集合 implements Map<k,v>接口
HashMap集合的特点：
    1.HashMap集合底层是哈希表：查询的速度特别的快
        Java1.8之前：数组+单向链表
        Java1.8之后：数组+单向链表/红黑树(链表的长度超过8)：提高查询速度
    2.HashMap集合是一个无序集合，存储进去的元素和取出来的元素顺序有可能不一样。

java.util.LinkedHashMap<k,v>集合 implements HashMap<k,v>
LinkedHashMap集合的特点：
    1.LinkedHashMap集合的底层是哈希表+链表(保证迭代的顺序)
    2.LinkedHashMap集合是一个有序的集合，存储元素和取出元素的顺序一致


/~~/


/*
    public V put(K key, V value):  把指定的键与指定的值添加到Map集合中
        返回值v:
            存储键值对的时候，key不重复，返回值v是null
            存储键值对的时候，key重复 ，会使用新的value值替换Map集合中原来的value值，返回值为新的value
     */
    private static void show01() {
        //使用多态创建HashMap集合
        Map<String,String> map=new HashMap<>();

        String v1 = map.put("拿破仑", "约瑟芬1");
        System.out.println("v1:"+v1);//v1:null

        String v2 = map.put("拿破仑", "约瑟芬2");
        System.out.println("v2:"+v2);//v2:约瑟芬1

        System.out.println(map);//{拿破仑=约瑟芬2}

        map.put("郭靖","黄蓉");
        map.put("牛郎","织女");
        map.put("梁山伯","祝英台");
        System.out.println(map);
    }


/~~/


/*
    public V remove(Object key): 把指定的键所对应的键值对元素 在Map集合中删除，返回被删除元素的值。
    返回值v:
        key存在，v返回被删除的元素
        key不存在，v返回null
     */
    private static void show02() {
        //创建HashMap集合
        Map<String,Integer> map=new HashMap<>();
        map.put("拿破仑",168);
        map.put("李小龙",173);
        map.put("李四",158);
        System.out.println(map);//{李四=158, 李小龙=173, 拿破仑=168}

        Integer v1 = map.remove("李四");
        System.out.println("v1:"+v1);//v1:158

        System.out.println(map);//{李小龙=173, 拿破仑=168}

        Integer v2 = map.remove("李大龙");
        System.out.println("v2:"+v2);//v2:null
    }


/~~/


/*
    public V get(Object key) 根据指定的键，在Map集合中获取对应的值。
    返回值v：
        key存在，返回值为key对应的元素
        key不存在，返回值为null
     */
    private static void show03() {
        //创建HashMap集合
        Map<String,Integer> map=new HashMap<>();
        map.put("拿破仑",168);
        map.put("李小龙",173);
        map.put("李四",158);

        Integer v1 = map.get("李小龙");
        System.out.println("v1:"+v1);//v1:173

        Integer v2 = map.get("李大龙");
        System.out.println("v2:"+v2);//v2:null
    }



/~~/


/*
    boolean containsKey(Object key)   判断集合中是否包含指定的键。
        包含指定的键返回true,不包含指定的键返回false
     */
    private static void show04() {
        //创建HashMap集合
        Map<String,Integer> map=new HashMap<>();
        map.put("拿破仑",168);
        map.put("李小龙",173);
        map.put("李四",158);

        boolean v1 = map.containsKey("李小龙");
        System.out.println("v1:"+v1);//v1:true

        boolean v2 = map.containsKey("李大龙");
        System.out.println("v2:"+v2);//v2:false
    }


/~~/


Map集合的第一种遍历方式：通过键找值的方式
Map集合中的方法：
    Set<k> keySet() 返回此映射中包含的键的Set视图
遍历的实现步骤
    1.使用Map集合中的keySet()方法，把Map集合中所有的key取出来，存储到Set集合中
    2.遍历Set集合，获取Map集合中的每一个key
    3.使用Map集合中的get(key)方法，通过key找到value

public static void main(String[] args) {
        //创建HashMap集合
        Map<String,Integer> map=new HashMap<>();
        map.put("拿破仑",168);
        map.put("李小龙",173);
        map.put("李四",158);

        //1.使用Map集合中的keySet()方法，把Map集合中所有的key取出来，存储到Set集合中
        Set<String> set = map.keySet();
        //2.遍历Set集合，获取Map集合中的每一个key
        //使用迭代器遍历Set集合
        Iterator<String> it = set.iterator();
        while (it.hasNext()){
            String key = it.next();
            //3.使用Map集合中的get(key)方法，通过key找到value
            Integer value = map.get(key);
            System.out.println(key+"="+value);
        }

        System.out.println("==========================");
        //使用增强for循环遍历Map集合
        for (String key : set) {
            Integer value = map.get(key);
            System.out.println(key+"="+value);
        }
    }


/~~/


遍历集合的第二种方式：使用Entry对象遍历
Map集合的方法
    Set<Map.entry<k,v>> entrySet() 返回此映射中所包含的映射关系的Set视图
遍历Map集合的实现步骤
    1.使用Map集合中的entrySet()方法，把集合中所有的entry对象取出来，存储到Set集合。
    2.遍历Set集合，获取每一个entry对象
    3.使用entry中的getKey()方法和getValue()方法获取键和值。


public static void main(String[] args) {
        //创建HashMap集合
        Map<String,Integer> map=new HashMap<>();
        map.put("拿破仑",168);
        map.put("李小龙",173);
        map.put("李四",158);

        //1.使用Map集合中的entrySet()方法，把集合中所有的entry对象取出来，存储到Set集合。
        Set<Map.Entry<String, Integer>> set = map.entrySet();
        //2.遍历Set集合，获取每一个entry对象
        //使用迭代器遍历Map集合
        Iterator<Map.Entry<String, Integer>> it = set.iterator();
        while(it.hasNext()){
            Map.Entry<String, Integer> entry = it.next();
            String key = entry.getKey();
            Integer value = entry.getValue();
            System.out.println(key+"="+value);
        }

        System.out.println("========================");

        //使用增强for循环遍历Map集合
        for (Map.Entry<String, Integer> entry : set) {
            String key = entry.getKey();
            Integer value = entry.getValue();
            System.out.println(key+"="+value);
        }
    }


/~~/


HashMap集合存储自定义键值
HashMap集合保证key唯一：
    作为key的元素，必须重写hashCode()方法和equals()方法，以保证key唯一


public static void main(String[] args) {
        show02();
    }

    /*
    HashMap集合存储自定义类型键值
    key:Person类型
        Person类必须重写hashCode()方法和equals()方法，以保证key唯一
    value:String类型
        可以重复
     */
    private static void show02() {
        //创建HashMap集合
        HashMap<Person, String> map = new HashMap<>();
        //向集合中添加元素
        map.put(new Person("女王",18),"英国");
        map.put(new Person("普京",19),"俄罗斯");
        map.put(new Person("秦始皇",20),"秦国");
        map.put(new Person("女王",18),"毛里求斯");

        //使用entrySet()方法和增强for循环遍历Map集合
        Set<Map.Entry<Person, String>> set = map.entrySet();
        for (Map.Entry<Person, String> entry : set) {
            Person key = entry.getKey();
            String value = entry.getValue();
            System.out.println(key+"--->"+value);
        }
    }

    /*
    HashMap存储自定义类型键值
    key:String类型
        String类重写hashCode()方法和equals()方法，保证key唯一
    value:Person类型
        value可以重复(同名同龄可以视为同一个人)
     */
    private static void show01() {
        //创建HashMap集合
        HashMap<String, Person> map = new HashMap<>();
        //向集合中添加元素
        map.put("北京",new Person("张三",18));
        map.put("上海",new Person("李四",19));
        map.put("南京",new Person("王五",20));
        map.put("北京",new Person("赵六",21));
        //使用keySet()方法和增强for循环遍历Map集合
        Set<String> set = map.keySet();
        for (String key : set) {
            Person value = map.get(key);
            System.out.println(key+"--->"+value);
        }
    }


/~~/


public class LinkedHashMap<K,V>extends HashMap<K,V>
Map 接口的哈希表和链接列表实现，具有可预知的迭代顺序
底层原理：
    哈希表+链表(记录元素的顺序)


 public static void main(String[] args) {
        HashMap<String,String> map=new HashMap<>();
        map.put("a","a");
        map.put("b","b");
        map.put("c","c");
        map.put("a","d");
        System.out.println(map);//{a=d, b=b, c=c} key不允许重复，无序

        LinkedHashMap<String,String> linked=new LinkedHashMap<>();
        linked.put("a","a");
        linked.put("b","b");
        linked.put("c","c");
        linked.put("a","d");
        System.out.println(linked);//{a=d, b=b, c=c} key不允许重复，有序
 }


/~~/


public class Hashtable<K,V>集合 implements Map<K,V>接口

Hashtable集合底层是哈希表，是一个线程安全的集合，是单线程集合，速度慢
HashMap集合底层是哈希表，是一个线程不安全的集合，是多线程集合，速度快

HashMap集合(之前学过的所有集合)可以存储null键和null值
Hashtable集合不可以存储null键和null值

Hashtable集合和vector集合一样在JDK1.2之后被更先进的集合(HashMap,ArrayList)取代了
Hashtable的子类properties依然活跃在历史舞台上
properties集合是一个唯一和IO流集合的集合


public static void main(String[] args) {
        HashMap<String,String> map=new HashMap<>();
        map.put(null,"b");
        map.put("a",null);
        map.put(null,null);
        System.out.println(map);//{null=null, a=null}

        Hashtable<String,String> table=new Hashtable<>();
        //table.put(null,"b");//java.lang.NullPointerException
        //table.put("a",null);//java.lang.NullPointerException
        //table.put(null,null);java.lang.NullPointerException
}


/~~/


练习：
    计算一个字符串中每个字符出现的次数
分析：
    1.使用Scanner获取用户键入的字符串
    2.创建Map集合，key是字符串中的字符，value是该字符在字符串中出现的次数
    3.遍历字符串获取每一个字符
    4.使用获取到的字符，到Map集合中判断key是否存在
        key存在：
            通过字符(key)，获取value(字符个数)
            value++
            put(key,value)把新的字符存到Map集合中
        key不存在：
        put(key,1)
    5.遍历Map集合，输出结果


public static void main(String[] args) {
        //1.使用Scanner获取用户键入的字符串
        Scanner sc=new Scanner(System.in);
        System.out.println("请输入一个字符串");
        String str = sc.next();
        //创建Map集合，key是字符串中的字符，value是该字符在字符串中出现的次数
        HashMap<Character,Integer> map=new HashMap<>();
        //3.遍历字符串获取每一个字符
        for(char c : str.toCharArray()){
            //4.使用获取到的字符，到Map集合中判断key是否存在
            if(map.containsKey(c)){
                //key存在
                Integer value = map.get(c);
                value++;
                map.put(c,value);
            }else{
                //key不存在
                map.put(c,1);
            }
        }
        //遍历Map集合
        for (Character key : map.keySet()) {
            Integer value = map.get(key);
            System.out.println(key+"--->"+value);
        }
    }


/~~/


JDK9的新特性：
    Set接口、List接口、Map接口：里面增加了一个静态方法of,可以给集合一次性添加多个元素
    static<E> List<E> of (E ...elements)
    该方法的使用前提：
        当集合中存储的元素个数已经确定了，不会改变了的时候可以使用此方法
    注意：
        1.of方法只适用于Set接口、List接口、Map接口，不适用于接口的实现类。
        2.of方法的返回值是一个不能改变的集合，集合不能再使用add()方法,put()方法添加元素，会抛出异常
        3.Set接口和Map接口在调用of方法的时，不能有重复的元素，否则会抛出异常。


public static void main(String[] args) {
        List<String> list = List.of("a", "b", "a", "c", "d");
        System.out.println(list);
        //list.add("w");//UnsupportedOperationException:不支持操作异常

        //Set<String> set = Set.of("a", "b", "a", "c", "d");//IllegalArgumentException:非法操作异常，有重复元素
        Set<String> set = Set.of("a", "b", "c", "d");
        System.out.println(set);
        //set.add("w");//UnsupportedOperationException:不支持操作异常

        //Map<String, Integer> map = Map.of("张三", 18, "李四", 19, "王五", 20, "张三", 18);////IllegalArgumentException:非法操作异常，有重复元素
        Map<String, Integer> map = Map.of("张三", 18, "李四", 19, "王五", 20);
        System.out.println(map);
        //map.put("赵六",21);//UnsupportedOperationException:不支持操作异常
}


/~~/


Debug调试程序
    可以让代码逐行执行，便于查看代码的执行过程，有效的的调试程序中的bug
使用方式：
    在行号的右边，鼠标左键单击，添加断点(每个方法的第一行，哪里有bug就添加到哪里)
    右键选择Debug执行程序
    程序就会停留在添加的第一断点处
执行程序：
    f8:逐行执行程序
    f7:进入方法中
    shift+f8:跳出方法
    f9:跳到下一个断点，如果没有下一个断点，程序就此结束。
    ctrl+f2:跳出Debug模式，停止程序
    Console:切换到控制台


/~~/


