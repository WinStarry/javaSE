IDEA常用快捷操作
5.fori :for(int i=0;i<5;i++){}
psvm :public stastic void main(String[] args){}
sout :System.out.println();
shift+F6:改变所有相同的量，改变一个，其他的跟着一起改变！
选中一个代码然后Ctrl+c+v可以复制整个代码新建一个新的界面
array.fori:for(i=0;i<=array.length;i++){}
array.forr:for(i=array.length-1;i>=0;i--){}
Alt + Insert -->生成Getter和Setter函数以及产生有参和无参构造方法

IDEA常用的快捷键
Alt+Enter 	导入包，自动修正代码 （对错误代码进行修复）
Ctrl+Y 	删除光标所在行
Ctrl+D	复制光标所在行的内容，插入光标位置下面
Ctrl+Alt+L	格式化代码
Ctrl+/	单行注释
Ctrl+Shift+/	选中代码注释，多行注释，再按取消注释
Alt+Ins	自动生成代码，toString，get，set等方法
Alt+Shift+上下箭头	移动当前代码行
Alt + 4	运行过一次之后的程序，可以通过这个快捷键再次查看运行结果
Shift + enter	切换到下一行
Ctrl+Alt+enter	切换到上一行



/~~/

复习之前学习过的方法入门知识

定义格式：
public static void 方法名称(){
    方法体;
}

调用格式：
方法名称();

注意事项：
1.方法定义的先后顺序无所谓
2.方法定义必须是挨着的，不能在一个方法内部定义另外一个方法。即方法的定义不可以进行嵌套！
3.方法定义好之后自己是不会执行的，如果希望执行，一定要进行方法的调用。

/~~/

方法其实就是若干语句的功能集合。
参数（原料）：就是进入方法的数据
返回值（产出物）：就是从方法中出来的数据

定义方法的完整格式：
修饰符 返回值类型 方法名称(参数类型 参数名称,...){
    方法体;
    return 返回值;
}

修饰符：现阶段的固定写法：public static
返回值类型：也就是方法最终产生的数据结果是什么数据类型
方法名称：方法的名字，规则和变量一样
参数类型：进入方法的数据是什么类型
参数名称：进入方法的数据对应的变量名称
PS：参数如果有多个，使用逗号进行分隔
方法体：方法需要做的事情，若干行代码
return:两个作用：
    第一：停止当前方法；
    第二：将后面的返回值还给调用处；
返回值：也就是方法执行最终产生的数据结果

注意：return后面的返回值，必须要和方法名称前面的返回值类型保持对应。

方法的三种调用格式
1.单独调用：方法名称(参数);
2.打印调用：System.out.println(方法名称(参数));
3.赋值调用：数据类型 变量名称=方法名称(参数);

注意:返回值类型为void，这种方法只能使用单独调用，不能进行打印调用和赋值调用。

/~~/

使用方法时的注意事项：
1.方法应该定义在类当中，不能在方法中再定义方法。即不能嵌套。
2.方法定义的先后顺序无所谓。
3.方法定义之后不会自动执行，如果希望方法执行，一定要调用：单独调用、打印调用、赋值调用。
4.如果方法有返回值，那么必须写上“return 返回值;”,不能没有。
5.return后面的返回值数据，必须和方法的返回值类型对应起来。
6.对于一个void没有返回值的方法，不能写return后面的返回值，只能写return自己。
7.对于void方法中最后一行的return可以省略不写
8.一个方法中可以有多个return语句，但是必须保证同时只有一个会被执行到，两个return不能连写。

/~~/

对于功能类似的方法来说，因为参数列表不一样，却要记住那么多不同的方法名称，太麻烦！
方法重载（Overload）：多个方法的名称一样，但是参数列表不一样。
好处：只要记住唯一一个方法名称，就可以实现类似的多个功能。

方法重载与下列因素相关：
1.参数个数不同
2.参数类型不同
3.参数的多类型顺序不同

方法重载与下列因素无关：
1.与参数的名称无关
2.与方法的返回值类型无关