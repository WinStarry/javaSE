继承是多态的前提，如果没有继承就没有多态
继承主要解决的问题是：共性抽取
继承关系当中的特点：
1.子类可以拥有父类的“内容”
2.子类还可以拥有自己专有的内容

/~~/

在继承的关系中，“子类就是一个父类”。也就是说，子类可以被当作父类看待
例如父类是员工，子类是讲师，那么“讲师就是一个员工”。关系：is-a

定义父类的格式：（一个普通的类定义）
public class 父类名称 {
       //...
}

定义子类的格式：
public class 子类名称 extends 父类名称 {
    //...
}

/~~/

在父子类的继承关系中，如果成员变量重名，则创建子类对象时，访问有两种方式：
    直接通过子类对象访问成员变量：
        等号左边是谁，就优先用谁，没有则向上找
    间接通过成员方法访问成员变量：
        该方法属于谁，就优先用谁，没有则向上找

/~~/

局部变量：       直接写成员变量
本类的成员变量：    this.成员变量
父类的成员变量：    super.成员变量

/~~/

在父子类的继承关系中，创建子类对象，访问成员方法的规则：
    创建的对象是谁，就优先用谁，如果没有则向上找。

注意事项：
无论时成员方法还是成员变量，如果没有则向上找父类，绝对不会向下找子类。

/~~/

重写（Override）
概念：在继承关系中，方法名一样，参数列表也一样。

重写（Override）:方法的名称一样，参数列表【也一样】
重载（Overload）:方法的名称一样，参数列表【不一样】

方法的覆盖重写特点：创建的是子类对象，则优先用子类方法。

方法覆盖的注意事项
1.必须保证父子类之间的方法名称相同，参数列表也相同。
@Override:写在方法前面，用来检测是不是有效的正确覆盖重写
这个注解就算不写，只要满足要求，也是正确的方法覆盖重写
2.子类方法的返回值必须【小于等于】父类方法的返回值范围
java.lang.Object类是所有类的公共最高类（祖宗类），java.lang.String就是Object的子类。
3.子类方法的权限必须【大于等于】父类方法的权限修饰符。
小扩展提示：public > protected > (default) > private
备注：(default)不是关键字default，而是什么都不写，留空。

/~~/

继承中方法的覆盖重写的应用场景
设计原则：
对于已经投入使用的类，尽量不要进行修改。推荐定义一个新的类，来重复利用其中共性内容，并且添加改动新内容。

/~~/

只有子类构造方法，才能调用父类构造方法。
继承关系中，父子类构造方法的访问特点
1.子类构造方法中有一个默认隐含的"super();"调用，所以一定是先调用父类的构造，后执行的子类的构造。
2.子类构造可以通过super关键字调用父类重载构造。
3.super的父类构造调用，必须是子类构造方法的第一个语句。不能一个子类构造调用多次super构造

总结：
子类必须调用父类构造方法，不写则赠送super();写了则用写的指定的super调用，super只能有一个，还必须是第一个。

/~~/

super关键字的用法有3种
    1.在子类的成员方法中，访问父类的成员变量
    2.在子类的成员方法中，访问父类的成员方法
    3.在子类的构造方法中，访问父类的构造方法

/~~/

super关键字用来访问父类内容，而this关键字用来访问本类内容
this关键字的3种用法
    1.在本类的成员方法中，访问本类的成员变量
    2.在本类的成员方法中，访问本类的另一个成员方法
    3.在本类的构造方法中，访问本类的另一个构造方法
    在第3种用法中要注意
        this(...)调用也必须是构造方法的第一个语句，唯一一个。
        super和this两种构造调用，不能同时使用

/~~/

java继承的三个特点
    Java语言是单继承的
        一个类的直接父类只有唯一一个
    Java语言可以多级继承
    一个子类的直接父类是唯一的，但是一个父类可以拥有很多个子类。

/~~/

如果父类中的方法不确定如何进行方法体的实现，那么这就应该是一个抽象方法。

抽象方法：就是在返回值前加上abstract关键字，然后去掉大括号，直接分号结束。
抽象类：抽象方法所在的类必须是抽象类。在类的class前加上abstract关键字即可。
public abstract class Animal{
    public abstract void eat();//这是一个抽象方法，代表吃东西，但是具体吃什么？是不清楚的！
    public void normalMethod(){}//这是普通的成员方法。
}


如何使用抽象类和抽象方法？
    1.不能直接创建new抽象类对象
    2.必须用一个子类来继承抽象父类
    3.子类必须覆盖重写抽象父类中所有的抽象方法。
        覆盖重写（实现）：去掉抽象方法的abstract关键字，然后补上方法体大括号。
    4.创建子类对象进行使用。


一个抽象类不一定含有抽象方法
只要保证抽象方法所在的类是抽象类即可。
这种没有抽象方法的抽象类，也不能直接创建对象。


注意事项
1. 抽象类不能创建对象，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。
    理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。
2. 抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的。
    理解：子类的构造方法中，有默认的super()，需要访问父类构造方法。
3. 抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。
    理解：未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。
4. 抽象类的子类，必须重写抽象父类中所有的抽象方法，否则，编译无法通过而报错。除非该子类也是抽象类。
    理解：假设不重写所有抽象方法，则类中可能包含抽象方法。那么创建对象后，调用抽象的方法，没有意义。
