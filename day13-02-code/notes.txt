java.util.Collection接口
        所有单列集合的最顶层接口，里面定义了所有单列集合共性的方法。
        任意单列集合都可以使用Collection接口中的方法

共性的方法：
     public boolean add(E e)：  把给定的对象添加到当前集合中。
     public void clear() :清空集合中所有的元素。
     public boolean remove(E e): 把给定的对象在当前集合中删除。
     public boolean contains(E e): 判断当前集合中是否包含给定的对象。
     public boolean isEmpty(): 判断当前集合是否为空。
     public int size(): 返回集合中元素的个数。
     public Object[] toArray(): 把集合中的元素，存储到数组中。


/~~/

java.util.Iterator接口：迭代器（对集合进行遍历）
    有两个常用的方法：
        boolean hasNext():如果仍有元素可以迭代，返回true值
            判断集合中还有没有下一个元素，有就返回true,没有就返回false
        E next():返回迭代的下一个元素，
            取出集合中的下一个元素

    Iterator迭代器是一个接口，我们无法直接使用，需要使用Iterator接口的实现类对象，
    获取实现类对象的方式比较特殊。Collection接口中有一个iterator()方法，
    这个方法的返回值就是迭代器的实现类对象。
        Iterator<E> iterator() 返回在此 Collection 的元素上进行迭代的迭代器

    迭代器的使用步骤：
        1.使用Collection集合中的iterator()方法获取迭代器的实现类对象，使用Iterator接口接收（多态）。
        2.使用Iterator接口中的hasNext()方法去判断还有没有下一个元素。
        3.使用Iterator接口中的next()方法获取集合中的下一个元素。


/~~/

增强for循环：底层使用的也是迭代器，使用for循环的格式，简化了迭代器的书写。
是JDK1.5之后出现的新特性

public interface Collection<E>extends Iterable<E>:所有的单列集合都可以使用增强for循环
public interface Iterable<T>实现这个接口允许对象成为 "foreach" 语句的目标。

增强for循环的作用：是用来遍历集合和数组

格式：
    for(集合/数组的数据类型 变量名 : 集合名/数组名){
        System.out.println(变量名);
    }


/~~/

定义一个含有泛型的类，模拟ArrayList集合
泛型是一个未知的数据类型，当我们不确定什么数据类型的时候，可以使用泛型
泛型可以接收任意的数据类型，可以使用Integer、String、Student...
创建对象的时候，确定泛型的数据类型


/~~


定义含有泛型的方法：泛型定义在方法的修饰符和返回值类型之间

格式：
    修饰符 <泛型> 返回值类型 方法名(参数列表(使用泛型)){
        方法体;
    }

含有泛型的方法，在调用方法的时候确定泛型的数据类型
传递什么类型的参数，泛型就是什么类型


/~~/


含有泛型的接口第一种使用方式：定义接口的实现类，实现接口 ，指定接口的泛型
public interface Iterator<E>{
    E next();
}

Scanner类实现了Iterator接口，并指定接口的泛型为String，所以重写的next()的方法泛型默认为String
public final class Scanner implements Iterator<String>{
    public String next();
}

含有泛型的接口第二种使用方式：接口使用什么泛型，实现类就使用什么泛型，类跟着接口走
就相当于创建了一个含有泛型的类，创建对象的时候确定泛型的类型

public interface List<E>{
    boolean add(E e);
    E get(int index);
}
public class ArrayList<E> implement List<E>{
    public boolean add(E e){}
    public E get(int index){}
}


/~~/


泛型的通配符
    ?:代表任意的数据类型
使用方式：
    不能创建对象使用
    只能作为方法的参数使用

泛型的上限限定：? extends E  代表使用的泛型只能是E类型的子类/本身
泛型的下限限定：? super E  代表使用的泛型只能E类型的父类/本身


/~~/
1




