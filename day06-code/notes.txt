注意事项：
1.成员变量是直接定义在类当中的，在方法外边。
2.成员方法修饰符中不要写static关键字。

/~~/

通常情况下，一个类并不能直接使用，需要根据类创建一个对象，才能使用。
1.导包：也就是指出需要使用的类，在什么位置。
    import 包名称.类名称;
    import com.yang.demo.demo01.Student;
    对于和当前类属于同一个包的情况，可以省略导包语句不写

2.创建
    类名称 对象名= new 类名称();
    Student stu = new Student();

3.使用,分两种情况：
    使用成员变量：对象名.成员变量名;
    使用成员方法：对象名.成员方法名(参数);
    （也就是，想用谁，就用对象名点谁）

注意事项：
如果成员变量没有进行赋值，那么将会有一个默认值，规则和数组一样。

//改变对象中成员变量的数值内容
//将右侧的字符串，赋值交给stu对象中的name成员变量
stu.name="xiaoyang";

/~~/

当一个对象作为参数，传递到方法中时，实际上传递进去的是对象的地址值。
当使用一个对象类型作为方法的返回值时，返回值其实就是对象的地址值。

/~~/

局部变量和成员变量
1.定义的位置不一样【重点】
局部变量：在方法的内部
成员变量：在方法的外面，直接写在类中

2.作用的范围不一样【重点】
局部变量：只在方法中起作用，出了方法就不再起作用
成员变量：整个类中可以通用

3.默认值不一样【重点】
局部变量：没有默认值，如果想要使用，必须手动进行赋值
成员变量：如果没有赋值，会有默认值，规则和数组一样。

4.内存的位置不一样（了解）
局部变量：位于栈内存中
成员变量：位于堆内存中

5.生命周期不一样（了解）
局部变量：随着方法进栈而诞生，随着方法出栈而消失
成员变量：随着对象创建而诞生，随着对象被垃圾回收而消失

/~~/

面向对象的三大特征：封装、继承、多态

封装性在Java中的体现：
1.方法就是一种的封装
2.关键字private也是一种封装。

封装就是将一些细节信息隐藏起来，对外界不可见

一旦使用了private进行修饰，那么本类中仍然可以随意访问。
但是超出了本类范围之外就不能在直接访问了。

间接访问private成员变量，就是定义一对儿getter/setter方法。
必须叫setXxx或者是getXxx命名规则
对于getter来说，不能有参数，返回值类型和成员变量对应。
对于setter来说，不能有返回值，参数类型和成员变量对应。

/~~/

当方法的局部变量和类的成员变量重名的时候，根据“就近原则”，优先使用局部变量。
如果需要访问本类中的成员变量，需要使用格式：this.成员变量名
"通过谁调用的方法，谁就是this"

/~~/

构造方法是专门用来创建对象的方法，当我们通过关键字new来创建对象时，其实就是在调用构造方法。
格式：
public 类名称(参数类型 参数名称){
    方法体;
}

注意事项：
1.构造方法的名称必须和所在的类名称完全一样，就连大小写也要一样。
2.构造方法不要写返回值类型，连void都不写。
3.构造方法不能return一个具体的返回值。
4.如果没有手动编写构造方法，那么编译器将会默认赠送一个构造方法，没有参数、方法体什么事情都不做。
5.一旦编写至少一个构造方法，那么编译器将不再赠送。
6.构造方法也是可以进行重载的。重载：方法名相同，参数列表不同。

/~~/

一个标准的类通常要拥有下面四个组成部分
1.所有的成员变量都要使用private关键字修饰
2.为每一个成员变量编写一对儿getter/setter方法
3.编写一个无参数的构造方法。
4.编写一个全参的构造方法。
这样标准的类也叫Java Bean